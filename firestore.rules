rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    // Checks if the user is authenticated.
    function isAuthenticated() {
      return request.auth != null;
    }

    // Gets the data of the currently authenticated user.
    // This is the source of truth for the user's role and tasks.
    function getAuthUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    // Checks if the authenticated user has the 'admin' role.
    function isAdmin() {
      return isAuthenticated() && getAuthUserData().role == 'admin';
    }

    // Checks if the authenticated user has the 'guru' role.
    function isGuru() {
      return isAuthenticated() && getAuthUserData().role == 'guru';
    }
    
    // Checks if the authenticated user has a specific additional task.
    function hasTugas(tugas) {
      // Use 'in' for lists/arrays in Firestore rules
      return isGuru() && tugas in getAuthUserData().tugasTambahan;
    }

    // --- Specific Role Helper Functions ---
    function isKepalaSekolah() {
      return hasTugas('kepala_sekolah');
    }
    
    function isKesiswaan() {
      return hasTugas('kesiswaan');
    }
    
    function isKepalaTataUsaha() {
      return hasTugas('kepala_tata_usaha');
    }

    // Checks if the data being written belongs to the authenticated user.
    function isOwner(dataKey) {
        return request.resource.data[dataKey] == request.auth.uid;
    }
    
    // Checks if the existing resource belongs to the authenticated user.
    function isResourceOwner(dataKey) {
        return resource.data[dataKey] == request.auth.uid;
    }

    // --- Collection Rules ---

    // USERS: Users can read/update their own profile. Admins can do anything.
    match /users/{userId} {
      allow get: if request.auth.uid == userId || isAdmin();
      allow list: if isAdmin() || isKepalaSekolah();
      allow create, delete: if isAdmin();
      allow update: if request.auth.uid == userId || isAdmin();
    }
    
    // SISWA: All authenticated users can read. Only admins can write.
    match /siswa/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // NILAI: Gurus can CRUD their own grade entries. Admins/Kepsek can read all.
    match /nilai/{docId} {
      allow read, delete: if isAdmin() || isKepalaSekolah() || (isGuru() && isResourceOwner('teacherUid'));
      allow list: if isAdmin() || isKepalaSekolah() || isGuru(); // Allow gurus to list for their own displays
      allow create: if isAdmin() || (isGuru() && isOwner('teacherUid'));
      allow update: if isAdmin() || (isGuru() && isResourceOwner('teacherUid') && isOwner('teacherUid'));
    }
    
    // AGENDA KELAS: Gurus can CRUD their own agenda. Admins/Kepsek can read all.
    match /agenda_kelas/{docId} {
      allow read, delete: if isAdmin() || isKepalaSekolah() || (isGuru() && isResourceOwner('teacherUid'));
      allow list: if isAdmin() || isKepalaSekolah() || isGuru();
      allow create: if isAdmin() || (isGuru() && isOwner('teacherUid'));
      allow update: if isAdmin() || (isGuru() && isResourceOwner('teacherUid') && isOwner('teacherUid'));
    }

    // LAPORAN KEGIATAN: Gurus can CRUD their own reports. Admins/Kepsek/KepalaTU can read all.
    match /laporan_kegiatan/{docId} {
      allow read: if isAdmin() || isKepalaSekolah() || isKepalaTataUsaha() || (isGuru() && isResourceOwner('createdByUid'));
      allow list: if isAdmin() || isKepalaSekolah() || isKepalaTataUsaha() || isGuru();
      allow create: if isGuru() && isOwner('createdByUid');
      allow update, delete: if isAdmin() || (isGuru() && isResourceOwner('createdByUid'));
    }
    
    // PELANGGARAN SISWA: Kesiswaan/BK can create. Admins/Kepsek/Kesiswaan can read. Admins/Kesiswaan can write.
    match /pelanggaran_siswa/{docId} {
        allow read: if isAdmin() || isKepalaSekolah() || isKesiswaan() || hasTugas('bk');
        allow list: if isAdmin() || isKepalaSekolah() || isKesiswaan() || hasTugas('bk');
        allow create: if isGuru() && (isKesiswaan() || hasTugas('bk')) && isOwner('recordedByUid');
        allow write: if isAdmin() || isKesiswaan();
    }

    // TEACHER DAILY ATTENDANCE: Gurus can create/read their own. Admins/Kepsek can read all and update/delete.
    match /teacherDailyAttendance/{docId} {
      allow get: if isAdmin() || isKepalaSekolah() || (isGuru() && docId.split('_')[0] == request.auth.uid);
      allow list: if isAdmin() || isKepalaSekolah() || isGuru();
      allow create: if isGuru() && isOwner('teacherUid');
      allow update, delete: if isAdmin() || isKepalaSekolah();
    }

    // --- Configuration Collections (Admin write, Authenticated read) ---
    match /bobot/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    match /academicYearConfigs/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    match /kkm_settings/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    match /mataPelajaranMaster/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    match /pengumuman/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    match /schoolConfig/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // --- Admin-Only Collections ---
    match /activity_logs/{docId} {
        allow read, write: if isAdmin();
    }
    
    match /teacherAttendance/{docId} {
       allow read, write: if isAdmin() || isKepalaSekolah();
    }
  }
}
