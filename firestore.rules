rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isOwner(uid) {
      return request.auth != null && request.auth.uid == uid;
    }

    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isGuru() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'guru';
    }

    function isKepalaSekolah() {
        return request.auth != null && 'kepala_sekolah' in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.tugasTambahan;
    }

    function isKepalaSekolahOrAdmin() {
      return isAdmin() || isKepalaSekolah();
    }
    
    // --- Collection Rules ---

    match /users/{userId} {
      allow read: if isOwner(userId) || isKepalaSekolahOrAdmin();
      allow write: if isAdmin(); // Only admins can create/update user profiles directly
    }

    match /siswa/{studentId} {
      allow read: if isGuru() || isAdmin();
      allow write: if isAdmin();
    }

    match /bobot/{document} {
      allow read: if isGuru() || isAdmin();
      allow write: if isAdmin();
    }
    
    match /academicYearConfigs/{yearId} {
      allow read: if isGuru() || isAdmin();
      allow write: if isAdmin();
    }
    
    match /kkm_settings/{kkmId} {
        allow read: if isGuru() || isAdmin();
        allow write: if isAdmin();
    }
    
    match /mataPelajaranMaster/{mapelId} {
      allow read: if isGuru() || isAdmin();
      allow write: if isAdmin();
    }
    
    match /pengumuman/{pengumumanId} {
      allow read: if isGuru() || isAdmin();
      allow write: if isAdmin();
    }
    
    match /schoolConfig/{configId} {
        allow read: if isGuru() || isAdmin();
        allow write: if isAdmin();
    }

    match /nilai/{gradeId} {
      // Teachers can read/write grades they own. Admins/Kepsek can read any.
      allow read: if request.auth != null && (isOwner(resource.data.teacherUid) || isKepalaSekolahOrAdmin());
      allow write: if request.auth != null && isOwner(request.resource.data.teacherUid);
      // Only Admin/Kepsek can delete.
      allow delete: if request.auth != null && isKepalaSekolahOrAdmin();
    }

    match /teacherDailyAttendance/{dailyId} {
      // This is the corrected rule.
      // It handles three cases:
      // 1. Admin/Kepsek can read anything.
      // 2. A get() request for an existing document checks the teacherUid inside the document.
      // 3. A get() request for a non-existent document checks the teacherUid in the document's path.
      allow read: if request.auth != null && (
        isKepalaSekolahOrAdmin() ||
        (resource != null && resource.data.teacherUid == request.auth.uid) ||
        (resource == null && dailyId.split('_')[0] == request.auth.uid)
      );

      // Write is for create/update. A teacher can only write their own attendance.
      allow write: if request.auth != null && (isOwner(request.resource.data.teacherUid) || isKepalaSekolahOrAdmin());
                   
      // Only Admin/Kepsek can delete.
      allow delete: if request.auth != null && isKepalaSekolahOrAdmin();
    }

    match /pelanggaran_siswa/{pelanggaranId} {
        allow read: if request.auth != null && (isGuru() || isAdmin());
        allow write: if request.auth != null && isGuru();
        allow delete: if isKepalaSekolahOrAdmin();
    }
    
    match /laporan_kegiatan/{laporanId} {
      allow read: if request.auth != null && (isOwner(resource.data.createdByUid) || isKepalaSekolahOrAdmin());
      allow write: if request.auth != null && isOwner(request.resource.data.createdByUid);
      allow delete: if request.auth != null && isOwner(resource.data.createdByUid);
    }
    
    match /agenda_kelas/{agendaId} {
      allow read: if request.auth != null && (isOwner(resource.data.teacherUid) || isKepalaSekolahOrAdmin());
      allow write: if request.auth != null && isOwner(request.resource.data.teacherUid);
      allow delete: if request.auth != null && isOwner(resource.data.teacherUid);
    }

    // Default deny all other collections/paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}