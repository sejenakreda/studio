
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(uid) {
      return isAuthenticated() && request.auth.uid == uid;
    }

    // This function can now be called safely because the '/users/{userId}' rule is fixed.
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function isAdmin() {
      return isAuthenticated() && getUserData().role == 'admin';
    }

    function isGuru() {
      return isAuthenticated() && getUserData().role == 'guru';
    }
    
    function hasTugas(tugas) {
      // Use 'in' for lists/arrays in Firestore rules
      return isGuru() && tugas in getUserData().tugasTambahan;
    }

    function isKepalaSekolah() {
      return hasTugas('kepala_sekolah');
    }
    
    function isKesiswaan() {
      return hasTugas('kesiswaan');
    }

    function isKepalaTataUsaha() {
      return hasTugas('kepala_tata_usaha');
    }

    // --- Collection Rules ---

    match /users/{userId} {
      // CRITICAL FIX: Allow any authenticated user to read any user profile.
      // This breaks the deadlock that was preventing all other rules from working.
      // User data is not sensitive, but write access is still protected.
      allow read: if isAuthenticated();
      
      // Update/write permissions remain secure.
      allow create, delete: if isAdmin();
      allow update: if isAdmin() || isUser(userId);
    }
    
    match /siswa/{docId} {
      allow read: if isAuthenticated(); // All authenticated users can read student list.
      allow write: if isAdmin();
    }
    
    match /nilai/{docId} {
      allow read: if isAuthenticated();
      // FIX: Ensure only a guru can write, and only to their own records.
      allow create, update: if isAdmin() || (isGuru() && request.resource.data.teacherUid == request.auth.uid);
      allow delete: if isAdmin() || (isGuru() && resource.data.teacherUid == request.auth.uid);
    }
    
    match /bobot/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    match /activity_logs/{docId} {
      allow read, write: if isAdmin();
    }
    
    match /academicYearConfigs/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    match /kkm_settings/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    match /mataPelajaranMaster/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    match /pengumuman/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    match /teacherDailyAttendance/{docId} {
      allow read: if isAuthenticated();
      // FIX: Ensure only a guru can create their own attendance.
      allow create: if isGuru() && request.resource.data.teacherUid == request.auth.uid;
      // Only Admin/Kepsek can edit or delete an attendance record once submitted.
      allow update, delete: if isAdmin() || isKepalaSekolah();
    }

    match /teacherAttendance/{docId} {
       allow read, write: if isAdmin() || isKepalaSekolah();
    }
    
    match /schoolConfig/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    match /pelanggaran_siswa/{docId} {
      allow read: if isAuthenticated();
      // FIX: Kesiswaan or BK can create records.
      allow create: if (isKesiswaan() || hasTugas('bk')) && request.resource.data.recordedByUid == request.auth.uid;
      // FIX: Only admin or the original recorder from Kesiswaan/BK can edit/delete.
      allow update, delete: if isAdmin() || (isKesiswaan() && resource.data.recordedByUid == request.auth.uid) || (hasTugas('bk') && resource.data.recordedByUid == request.auth.uid);
    }
    
    match /agenda_kelas/{docId} {
      allow read: if isAuthenticated();
      // FIX: Any guru can create/update/delete their own agenda entries.
      allow create, update: if isGuru() && request.resource.data.teacherUid == request.auth.uid;
      allow delete: if isGuru() && resource.data.teacherUid == request.auth.uid;
    }
    
    match /laporan_kegiatan/{docId} {
      allow read: if isAuthenticated();
      // FIX: Any guru can create/update/delete their own reports.
      allow create: if isGuru() && request.resource.data.createdByUid == request.auth.uid;
      allow update, delete: if isAdmin() || (isGuru() && resource.data.createdByUid == request.auth.uid);
    }
  }
}
