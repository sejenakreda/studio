
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(uid) {
      return isAuthenticated() && request.auth.uid == uid;
    }

    function getUserData() {
      // Use exists() for safety to prevent errors if a user auth record
      // exists but their firestore document does not.
      return exists(/databases/$(database)/documents/users/$(request.auth.uid))
             ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data
             : {};
    }

    function isAdmin() {
      return isAuthenticated() && getUserData().role == 'admin';
    }

    function isGuru() {
      return isAuthenticated() && getUserData().role == 'guru';
    }
    
    function hasTugas(tugas) {
      // Use 'in' for lists/arrays and check for field existence for safety
      return isGuru() && 'tugasTambahan' in getUserData() && tugas in getUserData().tugasTambahan;
    }

    function isKepalaSekolah() {
      return hasTugas('kepala_sekolah');
    }
    
    function isKesiswaan() {
      return hasTugas('kesiswaan');
    }

    function isKepalaTataUsaha() {
      return hasTugas('kepala_tata_usaha');
    }

    // --- Collection Rules ---

    match /users/{userId} {
      allow get: if isAuthenticated() && (isAdmin() || isUser(userId));
      allow list: if isAdmin() || isKepalaSekolah();
      allow create, delete: if isAdmin();
      allow update: if isAdmin() || isUser(userId);
    }
    
    match /siswa/{docId} {
      allow read: if isAuthenticated() && (isAdmin() || isGuru());
      allow write: if isAdmin();
    }
    
    match /nilai/{docId} {
      // FIX: Any teacher ('isGuru()') can now read their own grade documents.
      allow get: if isAuthenticated() && (isAdmin() || isKepalaSekolah() || (isGuru() && resource.data.teacherUid == request.auth.uid));
      // `list` allows queries. Firestore will then apply the `get` rule to each document.
      allow list: if isAuthenticated();
      
      // Writes are already correct.
      allow create, update: if isAuthenticated() && (isAdmin() || (isGuru() && request.resource.data.teacherUid == request.auth.uid));
      allow delete: if isAuthenticated() && (isAdmin() || (isGuru() && resource.data.teacherUid == request.auth.uid));
    }
    
    match /bobot/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    match /activity_logs/{docId} {
        allow read, write: if isAdmin();
    }
    
    match /academicYearConfigs/{docId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }
    
    match /kkm_settings/{docId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }
    
    match /mataPelajaranMaster/{docId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }
    
    match /pengumuman/{docId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }

    match /teacherDailyAttendance/{docId} {
      // FIX: Added isGuru() check for security and consistency.
      allow get: if isAuthenticated() && (isAdmin() || isKepalaSekolah() || (isGuru() && docId.split('_')[0] == request.auth.uid));
      allow list: if isAuthenticated();
      allow create: if isAuthenticated() && isGuru() && request.resource.data.teacherUid == request.auth.uid;
      // Update/delete is intentionally restrictive, only admin/kepsek can change a record.
      allow update, delete: if isAuthenticated() && (isAdmin() || isKepalaSekolah());
    }

    match /teacherAttendance/{docId} {
       allow read, write: if isAdmin() || isKepalaSekolah();
    }
    
    match /schoolConfig/{docId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }
    
    match /pelanggaran_siswa/{docId} {
        // FIX: Added BK so they can also read violation reports.
        allow read: if isAuthenticated() && (isAdmin() || isKepalaSekolah() || isKesiswaan() || hasTugas('bk'));
        allow create: if isAuthenticated() && isGuru() && (isKesiswaan() || hasTugas('bk'));
        // FIX: Allow the user who recorded the violation to also update/delete it.
        allow update, delete: if isAuthenticated() && (isAdmin() || isKesiswaan() || (isGuru() && resource.data.recordedByUid == request.auth.uid));
    }
    
    match /agenda_kelas/{docId} {
      // FIX: Added isGuru() check for security and consistency.
      allow get: if isAuthenticated() && (isAdmin() || isKepalaSekolah() || (isGuru() && resource.data.teacherUid == request.auth.uid));
      allow list: if isAuthenticated();
      // FIX: Added isGuru() check to ensure only a teacher can create an agenda for themselves.
      allow write: if isAuthenticated() && (isAdmin() || isKepalaSekolah() || (isGuru() && request.resource.data.teacherUid == request.auth.uid));
    }
    
    match /laporan_kegiatan/{docId} {
      // FIX: Added isGuru() check for security and consistency.
      allow read: if isAuthenticated() && (isAdmin() || isKepalaSekolah() || isKepalaTataUsaha() || (isGuru() && resource.data.createdByUid == request.auth.uid));
      // Rule is already correct.
      allow create: if isAuthenticated() && isGuru() && request.resource.data.createdByUid == request.auth.uid;
      // FIX: Changed from isUser to be more explicit that it must be a Guru editing their own report.
      allow update, delete: if isAuthenticated() && (isAdmin() || (isGuru() && resource.data.createdByUid == request.auth.uid));
    }
  }
}
