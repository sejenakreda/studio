
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isRole(role) {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    function isGuru() {
      return isRole('guru');
    }

    function isAdmin() {
      return isRole('admin');
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function hasTugas(tugas) {
       // Added check for existence of tugasTambahan field to prevent errors on new users
       return isSignedIn() && 'tugasTambahan' in get(/databases/$(database)/documents/users/$(request.auth.uid)).data && tugas in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.tugasTambahan;
    }

    function isKepalaSekolah() {
        return hasTugas('kepala_sekolah');
    }

    // --- Collections ---

    // Users: Admins can manage all, users can read their own.
    match /users/{userId} {
      allow read: if isSignedIn() && (isAdmin() || isOwner(userId) || isKepalaSekolah());
      allow write: if isAdmin();
    }

    // Siswa: Admins can manage all. All signed in users (gurus) can read the list.
    match /siswa/{studentId} {
      // SIMPLIFIED RULE: Any signed-in user can read the student list.
      // This is the core fix for the "gagal memuat data awal" error.
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // Nilai: Admins can read all. Gurus can manage their own.
    match /nilai/{gradeId} {
        allow read: if isSignedIn() && (isAdmin() || isKepalaSekolah() || isOwner(resource.data.teacherUid));
        allow create: if isSignedIn() && (isGuru() && isOwner(request.resource.data.teacherUid));
        allow update: if isSignedIn() && (isAdmin() || (isGuru() && isOwner(resource.data.teacherUid)));
        allow delete: if isSignedIn() && (isAdmin() || (isGuru() && isOwner(resource.data.teacherUid)));
    }

    // Bobot & Configs: Admins can write, all signed in users can read.
    match /bobot/{docId} { allow read: if isSignedIn(); allow write: if isAdmin(); }
    match /schoolConfig/{docId} { allow read: if isSignedIn(); allow write: if isAdmin(); }
    match /academicYearConfigs/{docId} { allow read: if isSignedIn(); allow write: if isAdmin(); }
    match /kkm_settings/{docId} { allow read: if isSignedIn(); allow write: if isAdmin(); }
    match /mataPelajaranMaster/{docId} { allow read: if isSignedIn(); allow write: if isAdmin(); }
    
    // Pengumuman: Admins can write, all signed in users can read.
    match /pengumuman/{docId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // Pelanggaran Siswa: Admins/Kepsek can read all. Kesiswaan/BK can create and read their own.
    match /pelanggaran_siswa/{docId} {
        allow read: if isSignedIn() && (isAdmin() || isKepalaSekolah() || hasTugas('kesiswaan') || hasTugas('bk'));
        allow create, update: if isSignedIn() && (hasTugas('kesiswaan') || hasTugas('bk'));
        allow delete: if isAdmin();
    }
    
    // Laporan Kegiatan: Admins/Kepsek can read all. Owners can manage their own.
    match /laporan_kegiatan/{docId} {
        allow read: if isSignedIn() && (isAdmin() || isKepalaSekolah() || isOwner(resource.data.createdByUid));
        allow create: if isSignedIn() && isOwner(request.resource.data.createdByUid);
        allow update, delete: if isSignedIn() && (isAdmin() || isOwner(resource.data.createdByUid));
    }

    // Teacher Attendance (Daily): Admins/Kepsek can manage all. Gurus can manage their own.
    match /teacherDailyAttendance/{docId} {
       // Corrected GET rule: Checks docId for ownership if resource doesn't exist
       allow get: if isSignedIn() && (
          (isAdmin() || isKepalaSekolah()) || 
          (isGuru() && isOwner(docId.split('_')[0]))
        );
       // Corrected LIST rule: relies on client query constraint & subsequent GET rule evaluation
       allow list: if isSignedIn();
       allow create: if isSignedIn() && isGuru() && isOwner(request.resource.data.teacherUid);
       allow update, delete: if isSignedIn() && (isAdmin() || isKepalaSekolah());
    }

    // Agenda Kelas: Admins/Kepsek can read all. Gurus can manage their own.
    match /agenda_kelas/{docId} {
        // Corrected GET rule
        allow get: if isSignedIn() && (isAdmin() || isKepalaSekolah() || isOwner(resource.data.teacherUid));
        // Corrected LIST rule
        allow list: if isSignedIn();
        allow create: if isSignedIn() && isGuru() && isOwner(request.resource.data.teacherUid);
        allow update, delete: if isSignedIn() && (isAdmin() || isKepalaSekolah() || isOwner(resource.data.teacherUid));
    }
    
    // Activity Logs: Admins can read all. Only backend can write.
    match /activity_logs/{docId} {
        allow read: if isAdmin();
        allow write: if false; // Only server/functions can write
    }
  }
}
