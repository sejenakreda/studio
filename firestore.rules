
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(uid) {
      return isAuthenticated() && request.auth.uid == uid;
    }

    function getUserData() {
      // It is critical that this function is only called after isAuthenticated() is confirmed.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function isAdmin() {
      return isAuthenticated() && getUserData().role == 'admin';
    }

    function isGuru() {
      // This is the primary check for any user with the 'guru' role.
      return isAuthenticated() && getUserData().role == 'guru';
    }
    
    function hasTugas(tugas) {
      // Helper for checking special additional roles.
      return isGuru() && tugas in getUserData().tugasTambahan;
    }

    function isKepalaSekolah() {
      return hasTugas('kepala_sekolah');
    }
    
    function isKesiswaan() {
      return hasTugas('kesiswaan');
    }

    function isKepalaTataUsaha() {
      return hasTugas('kepala_tata_usaha');
    }

    // --- Collection Rules ---

    match /users/{userId} {
      allow get: if isAuthenticated() && (isAdmin() || isUser(userId));
      allow list: if isAdmin() || isKepalaSekolah();
      allow create, delete: if isAdmin();
      allow update: if isAdmin() || isUser(userId);
    }
    
    match /siswa/{docId} {
      // Any authenticated user can read student data.
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    match /nilai/{docId} {
      // FIX: Any authenticated user can query grades (for admin/kepsek reports).
      // The `get` rule below provides document-level security.
      allow list: if isAuthenticated();
      
      // A user can get a specific grade document if they are an admin, headmaster, or the teacher who owns it.
      allow get: if isAuthenticated() && (isAdmin() || isKepalaSekolah() || (isGuru() && resource.data.teacherUid == request.auth.uid));
      
      // FIX: Any user with the 'guru' role can create/update a grade as long as they set themselves as the owner.
      allow create, update: if isAuthenticated() && (isAdmin() || (isGuru() && request.resource.data.teacherUid == request.auth.uid));
      
      // A guru can delete a grade they own. Admin can delete any.
      allow delete: if isAuthenticated() && (isAdmin() || (isGuru() && resource.data.teacherUid == request.auth.uid));
    }
    
    match /bobot/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    match /activity_logs/{docId} {
      allow read, write: if isAdmin();
    }
    
    match /academicYearConfigs/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    match /kkm_settings/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    match /mataPelajaranMaster/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    match /pengumuman/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    match /teacherDailyAttendance/{docId} {
      allow get: if isAuthenticated() && (isAdmin() || isKepalaSekolah() || (docId.split('_')[0] == request.auth.uid));
      allow list: if isAuthenticated();
      // FIX: Any 'guru' can create their own attendance record.
      allow create: if isAuthenticated() && isGuru() && request.resource.data.teacherUid == request.auth.uid;
      // Only admin/kepsek can modify/delete records for integrity.
      allow update, delete: if isAuthenticated() && (isAdmin() || isKepalaSekolah());
    }

    match /teacherAttendance/{docId} {
       allow read, write: if isAdmin() || isKepalaSekolah();
    }
    
    match /schoolConfig/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    match /pelanggaran_siswa/{docId} {
      allow read: if isAuthenticated();
      // Only specific roles can create violation records.
      allow create: if isAuthenticated() && (isKesiswaan() || hasTugas('bk'));
      // Admin, Kepsek, Kesiswaan can update/delete records.
      allow update, delete: if isAuthenticated() && (isAdmin() || isKepalaSekolah() || isKesiswaan());
    }
    
    match /agenda_kelas/{docId} {
      allow list: if isAuthenticated();
      allow get: if isAuthenticated() && (isAdmin() || isKepalaSekolah() || (isGuru() && resource.data.teacherUid == request.auth.uid));
      // FIX: Any 'guru' can create, update, or delete their own class agenda.
      allow write: if isAuthenticated() && (isAdmin() || (isGuru() && request.resource.data.teacherUid == request.auth.uid));
    }
    
    match /laporan_kegiatan/{docId} {
      allow read: if isAuthenticated();
      // FIX: Any 'guru' can create a report for their tasks. The app logic should filter which tasks they see.
      allow create: if isAuthenticated() && isGuru() && request.resource.data.createdByUid == request.auth.uid;
      // FIX: Any 'guru' can update/delete their OWN report. Admin can manage any.
      allow update, delete: if isAuthenticated() && (isAdmin() || (isGuru() && resource.data.createdByUid == request.auth.uid));
    }
  }
}
