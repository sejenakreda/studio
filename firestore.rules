rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ===== Helper Functions =====
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getRole() {
      // Get the user's role from their profile in the 'users' collection
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isAdmin() {
      return isSignedIn() && getRole() == 'admin';
    }

    function isGuru() {
        return isSignedIn() && getRole() == 'guru';
    }

    // ===== Default Rule: Deny All =====
    match /{document=**} {
      allow read, write: if false;
    }

    // ===== Collection Rules =====

    // --- User Profiles ---
    match /users/{userId} {
      // Any signed-in user can read profile data (for names, etc.).
      allow read: if isSignedIn();
      // An admin can update any user profile. A user can update their own.
      allow update: if isAdmin() || isOwner(userId);
      // Only admins can create new users or delete existing ones.
      allow create, delete: if isAdmin();
    }
    
    // --- Students ---
    match /siswa/{studentId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }
    
    // --- Grades ---
    match /nilai/{gradeId} {
      allow read: if isSignedIn();
      allow create, update: if isGuru();
      allow delete: if isAdmin();
    }
    
    // --- Academic Settings (Bobot, KKM, Mapel, etc.) ---
    match /bobot/global_weights {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    match /mataPelajaranMaster/{mapelId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }
    
    match /academicYearConfigs/{yearId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isAdmin();
    }
    
    match /kkm_settings/{kkmId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isAdmin();
    }

    // --- Communication & Reports ---
    match /pengumuman/{announcementId} {
        allow read: if isSignedIn();
        allow create, delete: if isAdmin();
    }

    // Daily teacher attendance records
    match /teacherDailyAttendance/{dailyId} {
       // A teacher can read/update their own records, an admin can manage any.
       // This works for get() and for list() queries that filter by teacherUid.
       allow read, update: if isAdmin() || request.auth.uid == resource.data.teacherUid;
       // A teacher can create their own record.
       allow create: if isAdmin() || request.auth.uid == request.resource.data.teacherUid;
       // Only an admin can delete records.
       allow delete: if isAdmin();
    }
    
    // Student Violations
    match /pelanggaran_siswa/{violationId} {
        // Admins and Gurus can read violations.
        allow read: if isGuru() || isAdmin();
        allow create: if isGuru();
        allow update, delete: if isAdmin();
    }

    // Activity Reports (Kesiswaan, Pembina, etc.)
    match /laporan_kegiatan/{reportId} {
        // Admins can read all reports. A guru can read their own.
        // The service logic MUST filter by createdByUid for gurus.
        allow read: if isAdmin() || isOwner(resource.data.createdByUid);
        allow create: if isGuru();
        // A guru can edit/delete their own reports. Admins can manage all.
        allow update, delete: if isAdmin() || isOwner(resource.data.createdByUid);
    }
    
    // Class Agendas
    match /agenda_kelas/{agendaId} {
        // Admins can read all agendas. A guru can read their own.
        allow read: if isAdmin() || isOwner(resource.data.teacherUid);
        allow create: if isGuru();
        // A guru can edit/delete their own agendas. Admins can manage all.
        allow update, delete: if isAdmin() || isOwner(resource.data.teacherUid);
    }

    // --- System & Config ---
    match /schoolConfig/main_profile {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }

    // Activity Logs
    match /activity_logs/{logId} {
      allow read, write: if isAdmin();
    }
  }
}
